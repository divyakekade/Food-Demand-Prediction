# -*- coding: utf-8 -*-
"""Food Demand Prediction.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1ykVAJs9A0Ug-GxByz0s3ekEOhWcD3lMS
"""

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.preprocessing import LabelEncoder
from sklearn.model_selection import train_test_split
from xgboost import XGBRegressor
from sklearn.linear_model import LinearRegression
from sklearn.ensemble import RandomForestRegressor
from sklearn.ensemble import GradientBoostingRegressor
from statsmodels.tsa.holtwinters import ExponentialSmoothing
from sklearn.preprocessing import StandardScaler
from sklearn import metrics
from sklearn.svm import SVR
from sklearn.metrics import mean_squared_error, r2_score
import pickle

data = pd.read_csv('/content/train.csv')
data = data[data['center_id']==13]

data.loc[data.meal_id == 1885, 'food_id'] = 1
data.loc[data.meal_id == 1993, 'food_id'] = 2
data.loc[data.meal_id == 2539, 'food_id'] = 3
data.loc[data.meal_id == 1248, 'food_id'] = 4
data.loc[data.meal_id == 2631, 'food_id'] = 5
data.loc[data.meal_id == 1311, 'food_id'] = 6
data.loc[data.meal_id == 2704, 'food_id'] = 6
data.loc[data.meal_id == 1062, 'food_id'] = 7
data.loc[data.meal_id == 1778, 'food_id'] = 8
data.loc[data.meal_id == 1803, 'food_id'] = 9
data.loc[data.meal_id == 1198, 'food_id'] = 9
data.loc[data.meal_id == 2707, 'food_id'] = 10
data.loc[data.meal_id == 1847, 'food_id'] = 11
data.loc[data.meal_id == 2577, 'food_id'] = 11
data.loc[data.meal_id == 1438, 'food_id'] = 12
data.loc[data.meal_id == 2494, 'food_id'] = 13
data.loc[data.meal_id == 2760, 'food_id'] = 14
data.loc[data.meal_id == 1525, 'food_id'] = 14
data.loc[data.meal_id == 2490, 'food_id'] = 15
data.loc[data.meal_id == 1109, 'food_id'] = 16
data.loc[data.meal_id == 2290, 'food_id'] = 17
data.loc[data.meal_id == 1878, 'food_id'] = 18
data.loc[data.meal_id == 2640, 'food_id'] = 15
data.loc[data.meal_id == 1754, 'food_id'] = 19
data.loc[data.meal_id == 1971, 'food_id'] = 19
data.loc[data.meal_id == 2826, 'food_id'] = 19
data.loc[data.meal_id == 2306, 'food_id'] = 20
data.loc[data.meal_id == 2139, 'food_id'] = 21
data.loc[data.meal_id == 2664, 'food_id'] = 18
data.loc[data.meal_id == 2569, 'food_id'] = 22
data.loc[data.meal_id == 1230, 'food_id'] = 23
data.loc[data.meal_id == 1207, 'food_id'] = 24
data.loc[data.meal_id == 2322, 'food_id'] = 25
data.loc[data.meal_id == 2492, 'food_id'] = 26
data.loc[data.meal_id == 1216, 'food_id'] = 20
data.loc[data.meal_id == 1727, 'food_id'] = 27
data.loc[data.meal_id == 1902, 'food_id'] = 28
data.loc[data.meal_id == 1247, 'food_id'] = 29
data.loc[data.meal_id == 2304, 'food_id'] = 30
data.loc[data.meal_id == 1543, 'food_id'] = 31
data.loc[data.meal_id == 1770, 'food_id'] = 32
data.loc[data.meal_id == 2126, 'food_id'] = 20
data.loc[data.meal_id == 1558, 'food_id'] = 33
data.loc[data.meal_id == 2581, 'food_id'] = 33
data.loc[data.meal_id == 1962, 'food_id'] = 33
data.loc[data.meal_id == 1571, 'food_id'] = 34
data.loc[data.meal_id == 2956, 'food_id'] = 35
data.loc[data.meal_id == 2104, 'food_id'] = 36
data.loc[data.meal_id == 2444, 'food_id'] = 37
data.loc[data.meal_id == 2867, 'food_id'] = 38
data.loc[data.meal_id == 1445, 'food_id'] = 39

data.loc[(data.week == 1) | (data.week == 2 )|(  data.week == 3) | (data.week == 4), 'Month'] = 1
data.loc[(data.week == 5) | (data.week == 6 )|(  data.week == 7) | (data.week == 8), 'Month'] = 2
data.loc[(data.week == 9) | (data.week == 10 )|(  data.week == 11) | (data.week == 12), 'Month'] = 3
data.loc[(data.week == 13) | (data.week == 14 )|(  data.week == 15) | (data.week == 16), 'Month'] = 4
data.loc[(data.week == 17) | (data.week == 18 )|(  data.week == 19) | (data.week == 20), 'Month'] = 5
data.loc[(data.week == 21) | (data.week == 22 )|(  data.week == 23) | (data.week == 24), 'Month'] = 6
data.loc[(data.week == 25) | (data.week == 26 )|(  data.week == 27) | (data.week == 28), 'Month'] = 7
data.loc[(data.week == 29) | (data.week == 30 )|(  data.week == 31) | (data.week == 32), 'Month'] = 8
data.loc[(data.week == 33) | (data.week == 34 )|(  data.week == 35) | (data.week == 36), 'Month'] = 9
data.loc[(data.week == 37) | (data.week == 38 )|(  data.week == 39) | (data.week == 40), 'Month'] = 10
data.loc[(data.week == 41) | (data.week == 42 )|(  data.week == 43) | (data.week == 44), 'Month'] = 11
data.loc[(data.week == 45) | (data.week == 46 )|(  data.week == 47) | (data.week == 48), 'Month'] = 12
data.loc[(data.week == 49) | (data.week == 50 )|(  data.week == 51) | (data.week == 52), 'Month'] = 1
data.loc[(data.week == 53) | (data.week == 54 )|(  data.week == 55) | (data.week == 56), 'Month'] = 2
data.loc[(data.week == 57) | (data.week == 58 )|(  data.week == 59) | (data.week == 60), 'Month'] = 3
data.loc[(data.week == 61) | (data.week == 62 )|(  data.week == 63) | (data.week == 64), 'Month'] = 4
data.loc[(data.week == 65) | (data.week == 66 )|(  data.week == 67) | (data.week == 68), 'Month'] = 5
data.loc[(data.week == 69) | (data.week == 70 )|(  data.week == 71) | (data.week == 72), 'Month'] = 6
data.loc[(data.week == 73) | (data.week == 74 )|(  data.week == 75) | (data.week == 76), 'Month'] = 7
data.loc[(data.week == 77) | (data.week == 78 )|(  data.week == 79) | (data.week == 80), 'Month'] = 8
data.loc[(data.week == 81) | (data.week == 82 )|(  data.week == 83) | (data.week == 84), 'Month'] = 9
data.loc[(data.week == 85) | (data.week == 86 )|(  data.week == 87) | (data.week == 88), 'Month'] = 10
data.loc[(data.week == 89) | (data.week == 90 )|(  data.week == 91) | (data.week == 92), 'Month'] = 11
data.loc[(data.week == 93) | (data.week == 94 )|(  data.week == 95) | (data.week == 96), 'Month'] = 12
data.loc[(data.week == 97) | (data.week == 98 )|(  data.week == 99) | (data.week == 100), 'Month'] = 1
data.loc[(data.week == 101) | (data.week == 102 )|(  data.week == 103) | (data.week == 104), 'Month'] = 2
data.loc[(data.week == 105) | (data.week == 106 )|(  data.week == 107) | (data.week == 108), 'Month'] = 3
data.loc[(data.week == 109) | (data.week == 110 )|(  data.week == 111) | (data.week == 112), 'Month'] = 4
data.loc[(data.week == 113) | (data.week == 114 )|(  data.week == 115) | (data.week == 116), 'Month'] = 5
data.loc[(data.week == 117) | (data.week == 118 )|(  data.week == 119) | (data.week == 120), 'Month'] = 6
data.loc[(data.week == 121) | (data.week == 122 )|(  data.week == 123) | (data.week == 124), 'Month'] = 7
data.loc[(data.week == 125) | (data.week == 126 )|(  data.week == 127) | (data.week == 128), 'Month'] = 8
data.loc[(data.week == 129) | (data.week == 130 )|(  data.week == 131) | (data.week == 132), 'Month'] = 9
data.loc[(data.week == 133) | (data.week == 134 )|(  data.week == 135) | (data.week == 136), 'Month'] = 10
data.loc[(data.week == 137) | (data.week == 138 )|(  data.week == 139) | (data.week == 140), 'Month'] = 11
data.loc[(data.week == 141) | (data.week == 142 )|(  data.week == 143) | (data.week == 144), 'Month'] = 12

# Converting data type 
data.drop(data[data['week']==145].index,inplace=True)
data['food_id'] = data['food_id'].apply(np.int64)
data['Month'] = data['Month'].apply(np.int64)
data.rename(columns={'checkout_price':'price'},inplace =True)
data

# data.isnull().sum()

data.loc[(data.week%4!=0),'week'] = data['week']%4
data.loc[(data.week%4==0),'week'] = 4

data

# droping unwanted features 
data = data.drop(['id'], axis=1)
data = data.drop(['meal_id'], axis=1)
data = data.drop(['center_id'], axis=1)

data = data.reset_index(drop=True)

data.describe()

#preprocessing  and analysis 

# checking number of entries for each feature 
data.count()

# checking dimensions of dataset
data.shape

# cheking datatypes of column
data.info()

# cheking for null value 
data.isnull().sum()

sns.set()

# distribution of orders according to food type
food_type_test = data.groupby(['food_id']).num_orders.sum().reset_index()
plt.figure(figsize=(6,6))
plt.plot(food_type_test['food_id'], food_type_test['num_orders'])

# Set the x-label and y-label
plt.xlabel('FOOD-ID')
plt.ylabel('No. of orders')

# Set the title of the graph
plt.title('count of orders according to food type')

# Display the graph
plt.show()

# distribution of orders according to food price
food_type_test = data.groupby(['price']).num_orders.sum().reset_index()
plt.figure(figsize=(14,6))
plt.plot(food_type_test['price'], food_type_test['num_orders'])

# Set the x-label and y-label
plt.xlabel('Price')
plt.ylabel('No. of orders')

# Set the title of the graph
plt.title('count of orders according to price')

# Display the graph
plt.show()

food_type_test = data.groupby(['Month']).num_orders.sum().reset_index()
plt.figure(figsize=(14,6))
plt.plot(food_type_test['Month'], food_type_test['num_orders'])

# Set the x-label and y-label
plt.xlabel('Month')
plt.ylabel('No. of orders')

# Set the title of the graph
plt.title('count of orders according to Month ')

# Display the graph
plt.show()

food_type_test = data.groupby(['week']).num_orders.sum().reset_index()
plt.figure(figsize=(14,6))
plt.plot(food_type_test['week'], food_type_test['num_orders'])

# Set the x-label and y-label
plt.xlabel('Week')
plt.ylabel('No. of orders')

# Set the title of the graph
plt.title('count of orders according to week')

# Display the graph
plt.show()

food_type_test = data.groupby(['week','Month']).num_orders.sum().reset_index()
print(food_type_test)
# plt.figure(figsize=(14,6))
# plt.plot(food_type_test['week'], food_type_test['num_orders'])

# # Set the x-label and y-label
# plt.xlabel('Week')
# plt.ylabel('No. of orders')

# # Set the title of the graph
# plt.title('count of orders according to week')

# # Display the graph
# plt.show()

# X are features and Y is target column
X = data.drop(columns='num_orders',axis=1)
Y = data['num_orders']
print(X)
print(Y)

# Splitting the data into traing and testing data 
X_train, X_test, Y_train, Y_test = train_test_split(X, Y, test_size=0.2, random_state=2)

print(X.shape, X_train.shape, X_test.shape)
print(Y.shape, Y_train.shape, Y_test.shape)






"""Random forest algorithm """

rf = RandomForestRegressor(n_estimators=100, random_state=42)
rf.fit(X_train, Y_train)

training_data_predcition = rf.predict(X_train)
r2_train = metrics.r2_score(Y_train, training_data_predcition)
print(r2_train)

testing_data_predcition = rf.predict(X_test)
r2_test = metrics.r2_score(Y_test, testing_data_predcition)
print(r2_test)

testing_values ={
    'week': [2],'price':[243.5],'Month':[1],'food_id':[14]
}
df = pd.DataFrame.from_dict(testing_values)
testing_result = rf.predict(df)
pickle.dump(rf,open('model.pkl','wb'))
model=pickle.load(open('model.pkl','rb'))


